// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  ORG
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id         String   @id @default(uuid())
  name       String?
  email      String   @unique
  image      String?
  role       UserRole @default(USER)
  password   String
  orgName    String?
  orgSize    String?
  orgcountry String?
  orgWebsite String?
  orgphone   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  problems             Problem[]
  submission           Submission[]
  problemSolved        ProblemSolved[]
  playlist             Playlist[]
  org                  Hackathon[]
  hackathonParticipant HackathonParticipant[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[] // ["tag1" , "tag2" , "tag3"]
  userId      String
  hackathonId String?
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  hackathon         Hackathon?          @relation(fields: [hackathonId], references: [id])
  submission        Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
  hackathonProblem  HackathonProblem[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted, Wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playListId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}

model Hackathon {
  id          String   @id @default(uuid())
  name        String
  description String?
  orgId       String
  startTime   DateTime
  endTime     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org          User                   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  problems     HackathonProblem[]
  participants HackathonParticipant[]
  problemList  Problem[]
}

model HackathonProblem {
  id          String @id @default(uuid())
  problemId   String
  hackathonId String

  hackathon Hackathon @relation(fields: [hackathonId], references: [id])
  problem   Problem   @relation(fields: [problemId], references: [id])

  @@unique([hackathonId, problemId])
}

model HackathonParticipant {
  id          String   @id @default(uuid())
  userId      String
  hackathonId String
  score       Int      @default(0)
  joinedAt    DateTime @default(now())

  hackathon Hackathon @relation(fields: [hackathonId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}
